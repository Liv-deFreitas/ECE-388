
SimonSays1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000990  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bb  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b0a  00000000  00000000  00001347  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001049f  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000076  00000000  00000000  0001235b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000123d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003484  00000000  00000000  00012401  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	27 d0       	rcall	.+78     	; 0xc4 <main>
  76:	35 c0       	rjmp	.+106    	; 0xe2 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
  7a:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
  7c:	84 b1       	in	r24, 0x04	; 4
  7e:	80 62       	ori	r24, 0x20	; 32
  80:	8f 77       	andi	r24, 0x7F	; 127
  82:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
  84:	89 2f       	mov	r24, r25
  86:	80 6a       	ori	r24, 0xA0	; 160
  88:	85 b9       	out	0x05, r24	; 5
  8a:	08 95       	ret

0000008c <InitADC>:
		}
	}
}
void InitADC()//initialize ADC
{
	ADMUX = (0b00 << REFS0);// Select Vref=AREF
  8c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);//set prescaler to 128 so we have a 125Khz clock source and enable ADC
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	87 68       	ori	r24, 0x87	; 135
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <ReadADC>:
}
uint16_t ReadADC(uint16_t ADCchannel)//Read ADC value
{
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);//select ADC channel with mask	
  9c:	ec e7       	ldi	r30, 0x7C	; 124
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	90 81       	ld	r25, Z
  a2:	90 7f       	andi	r25, 0xF0	; 240
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	89 2b       	or	r24, r25
  a8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);//enter conversion mode
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
	while( ADCSRA & (1<<ADSC) )	;// wait until ADC conversion is complete
  b4:	80 81       	ld	r24, Z
  b6:	86 fd       	sbrc	r24, 6
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <ReadADC+0x18>
	return ADC;//return ADC value
  ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  be:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  c2:	08 95       	ret

000000c4 <main>:
void InitADC();
uint16_t ReadADC(uint16_t ADCchannel);

int main (void)
{
	board_init(); //initialize xplained mini
  c4:	da df       	rcall	.-76     	; 0x7a <board_init>
	DDRB |= (1<<DDB3);//makes pb3 an output
  c6:	23 9a       	sbi	0x04, 3	; 4
	DDRC &= (0<<DDC0);//makes pc0 an input
  c8:	87 b1       	in	r24, 0x07	; 7
	//PORTB |= (1<<PORTB0)

	InitADC();//initialize the ADC
  ca:	17 b8       	out	0x07, r1	; 7
  cc:	df df       	rcall	.-66     	; 0x8c <InitADC>
	while(1){//once everything is initialized, continuously check to see if anyone is in range
		if(ReadADC(ADC0D) >= 280){
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	e4 df       	rcall	.-56     	; 0x9c <ReadADC>
  d4:	88 31       	cpi	r24, 0x18	; 24
  d6:	91 40       	sbci	r25, 0x01	; 1
  d8:	10 f0       	brcs	.+4      	; 0xde <main+0x1a>
			PORTB |= (1<<PORTB3);    //If ADC value is at or above 280 (IR analog output of ~0.9V, hand distance of 6in) turn fan on
  da:	2b 9a       	sbi	0x05, 3	; 5
  dc:	f8 cf       	rjmp	.-16     	; 0xce <main+0xa>
		}
		else {
			PORTB &= ~(1<<PORTB3);    //otherwise turn fan off
  de:	2b 98       	cbi	0x05, 3	; 5
  e0:	f6 cf       	rjmp	.-20     	; 0xce <main+0xa>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
